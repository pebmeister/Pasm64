
Processing macros.asm
                                          
Processing pagezero.asm
                                          
Processing kernal.asm
                                          
Processing basic.asm
                                          
Processing install.asm
                                                  *=  $C000
                                                  TBLLOC  = $A000
                                          
                                          .ifdef debug
                                                  .print "debug version"
                                          .endif
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;*  INSTALL                                 *
                                          ;*                                          *
                                          ;********************************************
                                          INSTALL
                                          
$C000: $58            cli                         cli
                                          
                                                  ;
                                                  ;   install wedge
                                                  ;
$C001: $AD $08 $03    lda $0308                   MOVE16 IGONE,IGONE_SV
$C004: $8D $30 $C6    sta $C630           
$C007: $AD $09 $03    lda $0309           
$C00A: $8D $31 $C6    sta $C631           
$C00D: $A9 $51        lda #$51                    MOVE16I IGONE,WEDGE
$C00F: $8D $08 $03    sta $0308           
$C012: $A9 $C0        lda #$C0            
$C014: $8D $09 $03    sta $0309           
                                          
                                                  ;
                                                  ;   set NXTLN
                                                  ;
$C017: $A5 $2B        lda $2B                     lda TXTTAB              ;   load start of basic
$C019: $85 $FB        sta $FB                     sta NXTLN               ;   into next line
$C01B: $85 $31        sta $31                     sta STREND
$C01D: $A5 $2C        lda $2C                     lda TXTTAB + 1
$C01F: $85 $FC        sta $FC                     sta NXTLN + 1
$C021: $85 $32        sta $32                     sta STREND + 1
                                          
$C023: $A9 $00        lda #$00                    lda #0
$C025: $A0 $05        ldy #$05                    ldy #5
                                          -
$C027: $91 $FB        sta ($FB),y                 sta (NXTLN),y
$C029: $88            dey                         dey
$C02A: $D0 $FB        bne $C027                   bne -
                                          
$C02C: $18            clc                         ADD16I STREND,2,STREND
$C02D: $A5 $31        lda $31             
$C02F: $69 $02        adc #$02            
$C031: $85 $31        sta $31             
$C033: $A5 $32        lda $32             
$C035: $69 $00        adc #$00            
$C037: $85 $32        sta $32             
$C039: $A5 $37        lda $37                     MOVE16 MEMSIZ,FRETOP
$C03B: $85 $33        sta $33             
$C03D: $A5 $38        lda $38             
$C03F: $85 $34        sta $34             
                                          
$C041: $A5 $31        lda $31                     lda STREND
$C043: $85 $2D        sta $2D                     sta VARTAB
$C045: $85 $2F        sta $2F                     sta ARYTAB
$C047: $A5 $32        lda $32                     lda STREND + 1
$C049: $85 $2E        sta $2E                     sta VARTAB + 1
$C04B: $85 $30        sta $30                     sta ARYTAB + 1
                                          
$C04D: $78            sei                         sei
                                          
$C04E: $4C $7B $E3    jmp $E37B                   jmp WARM
                                          
Processing wedge.asm
                                          ;********************************************
                                          ;*                                          *
                                          ;*  WEDGE                                   *
                                          ;*                                          *
                                          ;********************************************
                                          WEDGE
$C051: $A5 $3A        lda $3A                     lda CURLIN + 1
$C053: $C9 $FF        cmp #$FF                    cmp #$FF
$C055: $F0 $03        beq $C05A                   beq +
                                          
$C057: $6C $30 $C6    jmp ($C630)                 jmp (IGONE_SV)
                                                  
                                          +
$C05A: $A0 $01        ldy #$01                    ldy #1
                                          -
$C05C: $B9 $F2 $C0    lda $C0F2,y                 lda @RENUMCMD,y
$C05F: $F0 $07        beq $C068                   beq +
                                          
$C061: $D1 $7A        cmp ($7A),y                 cmp (TXTPTR),y
$C063: $D0 $7D        bne $C0E2                   bne +++++
$C065: $C8            iny                         iny
$C066: $D0 $F4        bne $C05C                   bne -
                                          +
$C068: $88            dey                         dey
                                          -
$C069: $20 $73 $00    jsr $0073                   jsr CHRGET
$C06C: $88            dey                         dey
$C06D: $D0 $FA        bne $C069                   bne -
                                                  ;
                                                  ;   init line number to 100
                                                  ;
$C06F: $A9 $64        lda #$64                    MOVE16I LSTART,100
$C071: $8D $2E $C6    sta $C62E           
$C074: $A9 $00        lda #$00            
$C076: $8D $2F $C6    sta $C62F           
                                          
                                                  ;
                                                  ;   init line increment
                                                  ;
$C079: $A9 $0A        lda #$0A                    MOVE16I INCR,10
$C07B: $85 $A3        sta $A3             
$C07D: $A9 $00        lda #$00            
$C07F: $85 $A4        sta $A4             
                                          
$C081: $A0 $01        ldy #$01                    ldy #1
$C083: $B1 $7A        lda ($7A),y                 lda (TXTPTR),y
$C085: $F0 $51        beq $C0D8                   beq +++
                                          
$C087: $20 $73 $00    jsr $0073                   jsr CHRGET
                                          +
$C08A: $20 $E5 $C0    jsr $C0E5                   jsr @GETLN
$C08D: $A4 $66        ldy $66                     ldy LNUMLEN
$C08F: $F0 $51        beq $C0E2                   beq +++
$C091: $20 $F9 $C0    jsr $C0F9                   jsr @VALIDATE
                                          
$C094: $A5 $FD        lda $FD                     MOVE16 LNUM,LSTART
$C096: $8D $2E $C6    sta $C62E           
$C099: $A5 $FE        lda $FE             
$C09B: $8D $2F $C6    sta $C62F           
                                          
$C09E: $88            dey                         dey
$C09F: $F0 $06        beq $C0A7                   beq +
                                          -
$C0A1: $20 $73 $00    jsr $0073                   jsr CHRGET
$C0A4: $88            dey                         dey
$C0A5: $D0 $FA        bne $C0A1                   bne -
                                          +
$C0A7: $A0 $01        ldy #$01                    ldy #1
$C0A9: $B1 $7A        lda ($7A),y                 lda (TXTPTR),y
$C0AB: $F0 $2B        beq $C0D8                   beq +
                                          
$C0AD: $20 $73 $00    jsr $0073                   jsr CHRGET
$C0B0: $C9 $2C        cmp #$2C                    cmp #','
$C0B2: $D0 $2E        bne $C0E2                   bne ++
                                          
$C0B4: $A0 $01        ldy #$01                    ldy #1
$C0B6: $B1 $7A        lda ($7A),y                 lda (TXTPTR),y
$C0B8: $F0 $1E        beq $C0D8                   beq +
                                          
$C0BA: $20 $73 $00    jsr $0073                   jsr CHRGET
                                          
$C0BD: $20 $E5 $C0    jsr $C0E5                   jsr @GETLN
$C0C0: $A4 $66        ldy $66                     ldy LNUMLEN
$C0C2: $F0 $1E        beq $C0E2                   beq ++
$C0C4: $20 $F9 $C0    jsr $C0F9                   jsr @VALIDATE
                                          
$C0C7: $A5 $FD        lda $FD                     MOVE16 LNUM,INCR
$C0C9: $85 $A3        sta $A3             
$C0CB: $A5 $FE        lda $FE             
$C0CD: $85 $A4        sta $A4             
                                          
$C0CF: $88            dey                         dey
$C0D0: $F0 $06        beq $C0D8                   beq +
                                          -
$C0D2: $20 $73 $00    jsr $0073                   jsr CHRGET
$C0D5: $88            dey                         dey
$C0D6: $D0 $FA        bne $C0D2                   bne -
                                          +
$C0D8: $20 $1E $C1    jsr $C11E                   jsr START
$C0DB: $90 $05        bcc $C0E2                   bcc +
                                          
$C0DD: $A2 $0E        ldx #$0E                    ldx #ILLEGALQUANITY
$C0DF: $4C $37 $A4    jmp $A437                   jmp ERROR
                                          
                                          +
$C0E2: $6C $30 $C6    jmp ($C630)                 jmp (IGONE_SV)
                                          @GETLN
$C0E5: $A5 $7A        lda $7A                     MOVE16 TXTPTR,NXTLN
$C0E7: $85 $FB        sta $FB             
$C0E9: $A5 $7B        lda $7B             
$C0EB: $85 $FC        sta $FC             
$C0ED: $A0 $00        ldy #$00                    ldy #0
$C0EF: $4C $EC $C2    jmp $C2EC                   jmp GETLINENUM
                                          @RENUMCMD        
$C0F2: $20 $52 $45    .db ' ', 'R', 'E'           .byte " RENUM",0
$C0F5: $4E $55 $4D    .db 'N', 'U', 'M'   
$C0F8: $00            .db $00             
                                          
                                          @VALIDATE
$C0F9: $48            pha                         PUSHAY
$C0FA: $98            tya                 
$C0FB: $48            pha                 
$C0FC: $A5 $66        lda $66                     lda LNUMLEN
$C0FE: $C9 $06        cmp #$06                    cmp #6
$C100: $B0 $17        bcs $C119                   bcs ++
                                          
$C102: $C9 $05        cmp #$05                    cmp #5
$C104: $90 $0F        bcc $C115                   bcc +
                                          
$C106: $A4 $62        ldy $62                     ldy LININS
$C108: $B1 $FB        lda ($FB),y                 lda (NXTLN),y
$C10A: $C9 $37        cmp #$37                    cmp #'7'
$C10C: $B0 $0B        bcs $C119                   bcs ++
                                          
$C10E: $C8            iny                         iny
$C10F: $B1 $FB        lda ($FB),y                 lda (NXTLN),y
$C111: $C9 $34        cmp #$34                    cmp #'4'
$C113: $B0 $04        bcs $C119                   bcs ++
                                          +
$C115: $68            pla                         POPAY
$C116: $A8            tay                 
$C117: $68            pla                 
$C118: $60            rts                         rts
                                          +
$C119: $A2 $0E        ldx #$0E                    ldx #ILLEGALQUANITY
$C11B: $4C $37 $A4    jmp $A437                   jmp ERROR
                                          
Processing vars.asm
                                          ;
                                          ;   zero page usage
                                          ;   we will map basic out so we can use
                                          ;   some basic zero page memory locations
                                          ;
                                          MINIDX  = VARNAM                        ;   min index for line lookup 2 bytes
                                          MAXIDX  = INPPTR                        ;   max index for line lookup 2 bytes
                                          TBLSZ   = UNUSED2                       ;   size of the table 2 bytes
                                          LASTIDX = UNUSED2 + 2                   ;   last used index 2 bytes
                                          LNUMLEN = FACSSGN                       ;   length of line we are searchng for 1 byte
                                          CURIDX  = INDEX                         ;   current index 2 bytes
                                          NXTLN   = FREKZP                        ;   next basic statement 2 bytes
                                          LNUM    = FREKZP + 2                    ;   line num to use 2 bytes
                                          INCR    = TMPDATA                       ;   line num increment 2 bytes
                                          BNVAR   = OPPTR                         ;   num to convert to bcd 3 bytes
                                          BCD     = OPMASK                        ;   bcd number result 3 bytes
                                          BCDSTR  = OLDLIN                        ;   bcd string result 6 bytes
                                          INQUOTE = UNUSED1                       ;   holds flag if we are in a string 1 byte
                                          PREVCH  = DIMFLG                        ;   prev char of line for 'go to' 1 byte
                                          LDZFLG  = RESHO                         ;   flag for printing leading zeros 1 bytes
                                          TBLPTR  = FORPNT                        ;   pointer for table 2 bytes
                                          TBLTMP  = DATPTR                        ;   used to create table 2 bytes
                                          BCDLEN  = FACEXP                        ;   length of BCD 1 byte
                                          LININS  = FACHO                         ;   line number insert offset 2 byte
                                          PRODUCT = FAC2                          ;   multiplication result
                                          
                                          .ifdef debug
                                          DUMPSTR = ARGHO                         ;   use to print strings 2 bytes
                                          .endif
Processing main.asm
                                          ;********************************************
                                          ;*                                          *
                                          ;*  START                                   *
                                          ;*                                          *
                                          ;*  main entry point                        *
                                          ;*                                          *
                                          ;********************************************
                                          START
$C11E: $20 $2F $C1    jsr $C12F                   jsr INITPROG            ;   initialize the program
$C121: $20 $A6 $C1    jsr $C1A6                   jsr PASS1               ;   perform pass1
                                          
                                                  ;
                                                  ;   check for an error
                                                  ;
$C124: $08            php                         php
$C125: $B0 $03        bcs $C12A                   bcs +
$C127: $20 $63 $C2    jsr $C263                   jsr PASS2               ;   perform pass2
                                          +
$C12A: $20 $84 $C1    jsr $C184                   jsr RESTORE             ;   put memory back to normal
$C12D: $28            plp                         plp
$C12E: $60            rts                         rts                     ;   done
                                          
Processing init.asm
                                          ;********************************************
                                          ;*                                          *
                                          ;*  INITPROG                                *
                                          ;*                                          *
                                          ;*  init the program                        *
                                          ;*                                          *
                                          ;*  set nxtlen to start of basic program    *
                                          ;*  set start line number                   *
                                          ;*  set line increment                      *
                                          ;*  set tblptr and tbltmp to tbl            *
                                          ;*                                          *
                                          ;*  destroys a                              *
                                          ;*                                          *
                                          ;********************************************
                                          INITPROG
$C12F: $A5 $A3        lda $A3                     lda INCR
$C131: $D0 $09        bne $C13C                   bne ++
$C133: $A5 $A4        lda $A4                     lda INCR + 1
$C135: $D0 $05        bne $C13C                   bne ++
                                          +           
$C137: $A2 $0E        ldx #$0E                    ldx #ILLEGALQUANITY
$C139: $4C $37 $A4    jmp $A437                   jmp ERROR
                                          +
$C13C: $A9 $7F        lda #$7F                    lda #127
$C13E: $8D $0D $DC    sta $DC0D                   sta CIAICR
$C141: $8D $0D $DD    sta $DD0D                   sta CI2ICR
                                          
                                                  ;
                                                  ;   set NXTLN
                                                  ;
$C144: $A5 $2B        lda $2B                     MOVE16 TXTTAB,NXTLN     ;   load start of basic
$C146: $85 $FB        sta $FB             
$C148: $A5 $2C        lda $2C             
$C14A: $85 $FC        sta $FC             
                                                                          ;   into next line
$C14C: $AD $2E $C6    lda $C62E                   MOVE16 LSTART,LNUM
$C14F: $85 $FD        sta $FD             
$C151: $AD $2F $C6    lda $C62F           
$C154: $85 $FE        sta $FE             
                                          
                                                  ;
                                                  ;   set table size to 0
                                                  ;
$C156: $A9 $00        lda #$00                    lda #0
$C158: $85 $57        sta $57                     sta TBLSZ
$C15A: $85 $58        sta $58                     sta TBLSZ + 1
                                          
                                                  ;
                                                  ;   determine   memory  map
                                                  ;
$C15C: $A5 $01        lda $01                     lda R6510
$C15E: $8D $2D $C6    sta $C62D                   sta R6510SV
                                          
                                                  ;
                                                  ;   check if basic is mapped in
                                                  ;
$C161: $29 $01        and #$01                    and #%00000001
$C163: $F0 $10        beq $C175                   beq +
                                          
                                                  ;
                                                  ;   we will switch basic out and use
                                                  ;   $A000   - $BFFF for our table
                                                  ;
$C165: $A9 $00        lda #$00                    MOVE16I TBL,TBLLOC      ;   Set Table location
$C167: $8D $32 $C6    sta $C632           
$C16A: $A9 $A0        lda #$A0            
$C16C: $8D $33 $C6    sta $C633           
                                          
                                                  ;
                                                  ;   map out basic
                                                  ;
$C16F: $A5 $01        lda $01                     lda R6510
$C171: $29 $FE        and #$FE                    and #~%00000001
$C173: $85 $01        sta $01                     sta R6510
                                          +
$C175: $AD $32 $C6    lda $C632                   lda TBL                 ;   Copy Table location to Table Pointer
$C178: $85 $49        sta $49                     sta TBLPTR              ;   and Table temp pointer
$C17A: $85 $41        sta $41                     sta TBLTMP
$C17C: $AD $33 $C6    lda $C633                   lda TBL + 1
$C17F: $85 $4A        sta $4A                     sta TBLPTR + 1
$C181: $85 $42        sta $42                     sta TBLTMP + 1
$C183: $60            rts                         rts
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;*  RESTORE                                 *
                                          ;*                                          *
                                          ;*  restore original memory state           *
                                          ;*                                          *
                                          ;********************************************
                                          RESTORE
$C184: $AD $2D $C6    lda $C62D                   lda R6510SV
$C187: $85 $01        sta $01                     sta R6510
$C189: $A9 $81        lda #$81                    lda #129
$C18B: $8D $0D $DC    sta $DC0D                   sta CIAICR
$C18E: $8D $0D $DD    sta $DD0D                   sta CI2ICR
                                          
$C191: $A5 $37        lda $37                     MOVE16 MEMSIZ,FRETOP
$C193: $85 $33        sta $33             
$C195: $A5 $38        lda $38             
$C197: $85 $34        sta $34             
                                          
$C199: $A5 $31        lda $31                     lda STREND
$C19B: $85 $2D        sta $2D                     sta VARTAB
$C19D: $85 $2F        sta $2F                     sta ARYTAB
$C19F: $A5 $32        lda $32                     lda STREND + 1
$C1A1: $85 $2E        sta $2E                     sta VARTAB + 1
$C1A3: $85 $30        sta $30                     sta ARYTAB + 1
                                          
$C1A5: $60            rts                         rts
                                          
Processing pass1.asm
                                          ;****************************************
                                          ;*                                      *
                                          ;* PASS1                                *
                                          ;*                                      *
                                          ;*  create table for old and new lines  *
                                          ;*  update line numbers                 *
                                          ;*  gotos etc will be fixes in pass2    *
                                          ;*                                      *
                                          ;****************************************
                                          PASS1
                                                  ;
                                                  ; check for last line of basic
                                                  ;
$C1A6: $20 $AD $C5    jsr $C5AD                   jsr LASTLINE
$C1A9: $D0 $03        bne $C1AE                   bne +
$C1AB: $4C $3C $C2    jmp $C23C                   jmp ++++
                                          +
                                                  ;
                                                  ; save original line number in table
                                                  ;
$C1AE: $20 $3E $C2    jsr $C23E                   jsr SAVETBL
                                          
                                                  ;
                                                  ; update the line number in basic
                                                  ;
$C1B1: $A0 $02        ldy #$02                    ldy #LNOFF
$C1B3: $A5 $FD        lda $FD                     lda LNUM
$C1B5: $91 $FB        sta ($FB),y                 sta (NXTLN),y
$C1B7: $A5 $FE        lda $FE                     lda LNUM + 1
$C1B9: $C8            iny                         iny
$C1BA: $91 $FB        sta ($FB),y                 sta (NXTLN),y
                                          
                                                  ;
                                                  ; add line increment to line number
                                                  ;
$C1BC: $18            clc                         ADD16 LNUM,INCR,LNUM
$C1BD: $A5 $FD        lda $FD             
$C1BF: $65 $A3        adc $A3             
$C1C1: $85 $FD        sta $FD             
$C1C3: $A5 $FE        lda $FE             
$C1C5: $65 $A4        adc $A4             
$C1C7: $85 $FE        sta $FE             
$C1C9: $90 $55        bcc $C220                   bcc ++
                                          
                                                  ;
                                                  ;   We wrapped. Line number too big
                                                  ;   restore original lines and then error out
                                          
                                                  ;
                                                  ;   set NXTLN
                                                  ;
$C1CB: $A5 $2B        lda $2B                     MOVE16 TXTTAB,NXTLN     ;   load start of basic into next line                                ;   
$C1CD: $85 $FB        sta $FB             
$C1CF: $A5 $2C        lda $2C             
$C1D1: $85 $FC        sta $FC             
$C1D3: $AD $32 $C6    lda $C632                   MOVE16 TBL,TBLTMP
$C1D6: $85 $41        sta $41             
$C1D8: $AD $33 $C6    lda $C633           
$C1DB: $85 $42        sta $42             
                                          -
$C1DD: $A0 $00        ldy #$00                    ldy #0
$C1DF: $B1 $41        lda ($41),y                 lda (TBLTMP),y
$C1E1: $A0 $02        ldy #$02                    ldy #LNOFF
$C1E3: $91 $FB        sta ($FB),y                 sta (NXTLN),y
$C1E5: $A0 $01        ldy #$01                    ldy #1
$C1E7: $B1 $41        lda ($41),y                 lda (TBLTMP),y
$C1E9: $A0 $03        ldy #$03                    ldy #LNOFF + 1
$C1EB: $91 $FB        sta ($FB),y                 sta (NXTLN),y
                                          
$C1ED: $A5 $57        lda $57                     lda TBLSZ
$C1EF: $D0 $06        bne $C1F7                   bne +
$C1F1: $A5 $58        lda $58                     lda TBLSZ + 1
$C1F3: $D0 $02        bne $C1F7                   bne +
                                          
$C1F5: $38            sec                         sec
$C1F6: $60            rts                         rts
                                          +
$C1F7: $38            sec                         DEC16 TBLSZ
$C1F8: $A5 $57        lda $57             
$C1FA: $E9 $01        sbc #$01            
$C1FC: $85 $57        sta $57             
$C1FE: $A5 $58        lda $58             
$C200: $E9 $00        sbc #$00            
$C202: $85 $58        sta $58             
$C204: $18            clc                         ADD16I TBLTMP,2,TBLTMP
$C205: $A5 $41        lda $41             
$C207: $69 $02        adc #$02            
$C209: $85 $41        sta $41             
$C20B: $A5 $42        lda $42             
$C20D: $69 $00        adc #$00            
$C20F: $85 $42        sta $42             
                                          
$C211: $A0 $00        ldy #$00                    ldy #NXOFF
$C213: $B1 $FB        lda ($FB),y                 lda (NXTLN),y
$C215: $AA            tax                         tax
$C216: $C8            iny                         iny
$C217: $B1 $FB        lda ($FB),y                 lda (NXTLN),y
$C219: $86 $FB        stx $FB                     stx NXTLN
$C21B: $85 $FC        sta $FC                     sta NXTLN + 1
$C21D: $4C $DD $C1    jmp $C1DD                   jmp -
                                          
                                                  ;
                                                  ; get the next line ptr
                                                  ; store in nxtln
                                                  ;
                                          +
$C220: $A0 $00        ldy #$00                    ldy #NXOFF
$C222: $B1 $FB        lda ($FB),y                 lda (NXTLN),y
$C224: $AA            tax                         tax
$C225: $C8            iny                         iny
$C226: $B1 $FB        lda ($FB),y                 lda (NXTLN),y
$C228: $86 $FB        stx $FB                     stx NXTLN
$C22A: $85 $FC        sta $FC                     sta NXTLN + 1
                                          
                                                  ;
                                                  ; increment table size
                                                  ;
$C22C: $18            clc                         INC16 TBLSZ
$C22D: $A5 $57        lda $57             
$C22F: $69 $01        adc #$01            
$C231: $85 $57        sta $57             
$C233: $A5 $58        lda $58             
$C235: $69 $00        adc #$00            
$C237: $85 $58        sta $58             
                                          
$C239: $4C $A6 $C1    jmp $C1A6                   jmp PASS1
                                          
                                          +
                                                  ;
                                                  ; clear carry to signal success
                                                  ;
$C23C: $18            clc                         clc
$C23D: $60            rts                         rts
                                          
                                          ;****************************************
                                          ;*                                      *
                                          ;* SAVETBL                              *
                                          ;*                                      *
                                          ;*  add the current line to the table   *
                                          ;*  nxtln must point to start of line   *
                                          ;*                                      *
                                          ;*  destroys a,y                        *
                                          ;*                                      *
                                          ;****************************************
                                          SAVETBL
                                                  ;
                                                  ; move line number to bnvar
                                                  ;
$C23E: $A0 $02        ldy #$02                    ldy #LNOFF
$C240: $B1 $FB        lda ($FB),y                 lda (NXTLN),y
$C242: $AA            tax                         tax
$C243: $C8            iny                         iny
$C244: $B1 $FB        lda ($FB),y                 lda (NXTLN),y
$C246: $86 $4B        stx $4B                     stx BNVAR
$C248: $85 $4C        sta $4C                     sta BNVAR + 1
                                          
                                                  ;
                                                  ; tbltmp points to next spot in table
                                                  ; store line number contained bnvar in table
                                                  ;
$C24A: $A0 $00        ldy #$00                    ldy #0
$C24C: $A5 $4B        lda $4B                     lda BNVAR
$C24E: $91 $41        sta ($41),y                 sta (TBLTMP),y
$C250: $A5 $4C        lda $4C                     lda BNVAR + 1
$C252: $C8            iny                         iny
$C253: $91 $41        sta ($41),y                 sta (TBLTMP),y
                                          
                                                  ;
                                                  ; increment table ptr by 2 bytes
                                                  ;
$C255: $18            clc                         ADD16I TBLTMP,2,TBLTMP
$C256: $A5 $41        lda $41             
$C258: $69 $02        adc #$02            
$C25A: $85 $41        sta $41             
$C25C: $A5 $42        lda $42             
$C25E: $69 $00        adc #$00            
$C260: $85 $42        sta $42             
$C262: $60            rts                         rts
                                          
Processing pass2.asm
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* PASS2                                    *
                                          ;*                                          *
                                          ;*  reset current line to beginning         *
                                          ;*  find goto gosub then go to              *
                                          ;*  lookup line in table                    *
                                          ;*  if it fits replace if not move lines    *
                                          ;*  so it does fit                          *
                                          ;*                                          *
                                          ;********************************************
                                          PASS2
$C263: $AD $20 $D0    lda $D020                   lda BORDER
$C266: $48            pha                         pha
                                          
                                                  ;
                                                  ;   set NXTLN
                                                  ;
$C267: $A5 $2B        lda $2B                     MOVE16 TXTTAB,NXTLN     ;   load start of basic
$C269: $85 $FB        sta $FB             
$C26B: $A5 $2C        lda $2C             
$C26D: $85 $FC        sta $FC             
                                                                          ;   into next line
                                                  ;
                                                  ;   clear quote flag
                                                  ;
                                          -
$C26F: $A9 $00        lda #$00                    lda #0
$C271: $85 $02        sta $02                     sta INQUOTE
                                          
                                                  ;
                                                  ;   check for last line of basic
                                                  ;
$C273: $20 $AD $C5    jsr $C5AD                   jsr LASTLINE
$C276: $D0 $05        bne $C27D                   bne +                   ;   continue
                                          
$C278: $68            pla                         pla
$C279: $8D $20 $D0    sta $D020                   sta BORDER
                                          
                                                  ;
                                                  ;   exit
                                                  ;
$C27C: $60            rts                         rts
                                          
                                                  ;
                                                  ;   init y to point to first char in line   -1
                                                  ;
                                          +
$C27D: $A0 $03        ldy #$03                    ldy #TXTOFF - 1
$C27F: $A9 $00        lda #$00                    lda #0
                                          -
                                                  ;
                                                  ;   reg a contains prevch
                                                  ;   skip spaces
                                                  ;
$C281: $C9 $20        cmp #$20                    cmp #SPACE
$C283: $F0 $02        beq $C287                   beq +                   ;   dont save a in prevch
                                          
                                                  ;
                                                  ;   save non space
                                                  ;
$C285: $85 $0C        sta $0C                     sta PREVCH
                                          +
                                                  ;
                                                  ;   get the next char in line
                                                  ;
$C287: $C8            iny                         iny                     ;   increment offset
$C288: $B1 $FB        lda ($FB),y                 lda (NXTLN),y           ;   get the char
$C28A: $F0 $4E        beq $C2DA                   beq +++                 ;   00 signifies eol
                                          
                                                  ;
                                                  ;   see if we got a quote
                                                  ;
$C28C: $C9 $22        cmp #$22                    cmp #QUOTE
$C28E: $F0 $41        beq $C2D1                   beq ++
                                          
                                                  ;
                                                  ;   see if we are in a string
                                                  ;
$C290: $A6 $02        ldx $02                     ldx INQUOTE
$C292: $D0 $ED        bne $C281                   bne -                   ;   if we are in a string skip
                                          
                                                  ;
                                                  ;   start looking for tokens
                                                  ;
$C294: $C9 $89        cmp #$89                    cmp #GOTO_TOK           ;   check for goto
$C296: $F0 $12        beq $C2AA                   beq +
$C298: $C9 $8D        cmp #$8D                    cmp #GOSUB_TOK          ;   check for gosub
$C29A: $F0 $0E        beq $C2AA                   beq +
$C29C: $C9 $A7        cmp #$A7                    cmp #THEN_TOK           ;   check for then
$C29E: $F0 $0A        beq $C2AA                   beq +
$C2A0: $C9 $A4        cmp #$A4                    cmp #TO_TOK             ;   check for to
$C2A2: $D0 $DD        bne $C281                   bne -
$C2A4: $A6 $0C        ldx $0C                     ldx PREVCH              ;   check for go before to
$C2A6: $E0 $CB        cpx #$CB                    cpx #GO_TOK
$C2A8: $D0 $D7        bne $C281                   bne -
                                          +
                                          -
$C2AA: $C8            iny                         iny                     ;   increment offset
$C2AB: $B1 $FB        lda ($FB),y                 lda (NXTLN),y           ;   get the char
$C2AD: $F0 $2B        beq $C2DA                   beq ++                  ;   00 signifies eol
                                          
$C2AF: $C9 $3A        cmp #$3A                    cmp #':'                ;   if we have a colon continue with rest of line
$C2B1: $F0 $CE        beq $C281                   beq --
                                          
$C2B3: $C9 $20        cmp #$20                    cmp #SPACE              ;   if we have a space skip it
$C2B5: $F0 $F3        beq $C2AA                   beq -
                                          
$C2B7: $C9 $2C        cmp #$2C                    cmp #','                ;   if we have a comma skip it
$C2B9: $F0 $EF        beq $C2AA                   beq -
                                          
$C2BB: $C9 $30        cmp #$30                    cmp #'0'
$C2BD: $90 $C2        bcc $C281                   bcc --                  ;   less than '0'
$C2BF: $C9 $3A        cmp #$3A                    cmp #'9' + 1            ;   greater than '9'
$C2C1: $B0 $BE        bcs $C281                   bcs --
                                          
                                                  ;
                                                  ;   we have a line number
                                                  ;
                                          
$C2C3: $20 $EC $C2    jsr $C2EC                   jsr GETLINENUM          ;   parse linenumber in basic line
$C2C6: $20 $34 $C3    jsr $C334                   jsr FINDLINENUM         ;   look up old linenumber and get new line number
$C2C9: $20 $BB $C3    jsr $C3BB                   jsr INSERTLINENUM       ;   insert the new line number
                                          
$C2CC: $8A            txa                         txa                     ;   x contains current pointer in line
$C2CD: $A8            tay                         tay
$C2CE: $4C $AA $C2    jmp $C2AA                   jmp -
                                          
                                                  ;
                                                  ;   we got a quote
                                                  ;
                                          +
$C2D1: $A5 $02        lda $02                     lda INQUOTE             ;   load quote flag
$C2D3: $49 $01        eor #$01                    eor #1                  ;   flip the bit
$C2D5: $85 $02        sta $02                     sta INQUOTE             ;   save the result
$C2D7: $4C $81 $C2    jmp $C281                   jmp --                  ;   continue with rest of line
                                          
                                                  ;
                                                  ;   get the next line ptr
                                                  ;   store in nxtln
                                                  ;
                                          +
$C2DA: $A0 $00        ldy #$00                    ldy #NXOFF              ; offset from line offset
$C2DC: $B1 $FB        lda ($FB),y                 lda (NXTLN),y           ; load next line offset
$C2DE: $AA            tax                         tax                     ; save in x
$C2DF: $C8            iny                         iny
$C2E0: $B1 $FB        lda ($FB),y                 lda (NXTLN),y           ; get next byte
$C2E2: $86 $FB        stx $FB                     stx NXTLN               ; set next line
$C2E4: $85 $FC        sta $FC                     sta NXTLN + 1
                                          
$C2E6: $EE $20 $D0    inc $D020                   INC BORDER
                                          
$C2E9: $4C $6F $C2    jmp $C26F                   jmp ---
                                          
Processing getlinenum.asm
                                          ;********************************************
                                          ;*                                          *
                                          ;* GETLINENUM                               *
                                          ;*                                          *
                                          ;*  get line number in basic line           *
                                          ;*  (nxtln),y points to PETACII lnumber     *
                                          ;*                                          *
                                          ;*  on exit lnum = line number              *
                                          ;*          LININS = y offset               *
                                          ;*                                          *
                                          ;********************************************
                                          GETLINENUM
                                                  ;
                                                  ;   clear lnum
                                                  ;
$C2EC: $A9 $00        lda #$00                    lda #0
$C2EE: $85 $FD        sta $FD                     sta LNUM
$C2F0: $85 $FE        sta $FE                     sta LNUM + 1
$C2F2: $85 $66        sta $66                     sta LNUMLEN
$C2F4: $84 $62        sty $62                     sty LININS
                                          -
$C2F6: $B1 $FB        lda ($FB),y                 lda (NXTLN),y
$C2F8: $C9 $30        cmp #$30                    cmp #'0'
$C2FA: $90 $37        bcc $C333                   bcc +
$C2FC: $C9 $3A        cmp #$3A                    cmp #'9' + 1
$C2FE: $B0 $33        bcs $C333                   bcs +
                                          
                                                  ;
                                                  ;   increment line length
                                                  ;
$C300: $E6 $66        inc $66                     inc LNUMLEN
                                          
                                                  ;
                                                  ;   a now contains a digit
                                                  ;   multiply lnum * 10
                                                  ;   add digit
                                                  ;
$C302: $48            pha                         PUSHAY                  ;   save registers
$C303: $98            tya                 
$C304: $48            pha                 
$C305: $06 $FD        asl $FD                     MULT10 LNUM             ;   multiply by 10
$C307: $26 $FE        rol $FE             
$C309: $A6 $FD        ldx $FD             
$C30B: $A4 $FE        ldy $FE             
$C30D: $06 $FD        asl $FD             
$C30F: $26 $FE        rol $FE             
$C311: $06 $FD        asl $FD             
$C313: $26 $FE        rol $FE             
$C315: $18            clc                 
$C316: $8A            txa                 
$C317: $65 $FD        adc $FD             
$C319: $85 $FD        sta $FD             
$C31B: $98            tya                 
$C31C: $65 $FE        adc $FE             
$C31E: $85 $FE        sta $FE             
$C320: $68            pla                         POPAY                   ;   restore registers
$C321: $A8            tay                 
$C322: $68            pla                 
                                          
$C323: $29 $CF        and #$CF                    and #~'0'               ;   mask off string
$C325: $18            clc                         clc                     ;   add to lnum
$C326: $65 $FD        adc $FD                     adc LNUM
$C328: $85 $FD        sta $FD                     sta LNUM
$C32A: $A5 $FE        lda $FE                     lda LNUM + 1
$C32C: $69 $00        adc #$00                    adc #0
$C32E: $85 $FE        sta $FE                     sta LNUM + 1
$C330: $C8            iny                         iny
$C331: $D0 $C3        bne $C2F6                   bne -                   ;   get the next digit
                                          +
$C333: $60            rts                         rts
                                          
Processing findlinenum.asm
                                          ;********************************************
                                          ;*                                          *
                                          ;* FINDLINENUM                              *
                                          ;*                                          *
                                          ;*  find line number in a sorted table      *
                                          ;*  using a binary search                   *
                                          ;*                                          *
                                          ;********************************************
                                          FINDLINENUM
                                                  ;
                                                  ;   init maxidx
                                                  ;
$C334: $A5 $57        lda $57                     MOVE16 TBLSZ,MAXIDX
$C336: $85 $43        sta $43             
$C338: $A5 $58        lda $58             
$C33A: $85 $44        sta $44             
                                          
                                                  ;
                                                  ;   init lastidx
                                                  ;
$C33C: $A9 $FF        lda #$FF                    lda #$FF
$C33E: $85 $59        sta $59                     sta LASTIDX
$C340: $85 $5A        sta $5A                     sta LASTIDX + 1
                                          
                                                  ;
                                                  ;   convert maxidx to bytes
                                                  ;
$C342: $38            sec                         sec
$C343: $06 $43        asl $43                     asl MAXIDX
$C345: $26 $44        rol $44                     rol MAXIDX  + 1
                                          
                                                  ;
                                                  ;   init minidx
                                                  ;
$C347: $A9 $00        lda #$00                    lda #0
$C349: $85 $45        sta $45                     sta MINIDX
$C34B: $85 $46        sta $46                     sta MINIDX  + 1
                                          
                                          .ifdef debug
                                                  jsr DUMP_LN
                                                  jsr DUMP_STAR
                                          .endif
                                          -
                                          .ifdef debug
                                                  jsr DUMP_MX
                                                  jsr DUMP_MN
                                                  jsr DUMP_TS
                                          .endif
                                                  ;
                                                  ;   calculate next index to table
                                                  ;   table is sorted so binary search
                                                  ;   maxidx  - minidx
                                                  ;
$C34D: $38            sec                         SUB16 MAXIDX,MINIDX,CURIDX
$C34E: $A5 $43        lda $43             
$C350: $E5 $45        sbc $45             
$C352: $85 $22        sta $22             
$C354: $A5 $44        lda $44             
$C356: $E5 $46        sbc $46             
$C358: $85 $23        sta $23             
                                          
                                                  ;
                                                  ;   divide by 2
                                                  ;
$C35A: $46 $23        lsr $23                     lsr CURIDX  + 1         ;   curidx >> 1
$C35C: $66 $22        ror $22                     ror CURIDX
                                          
                                                  ;
                                                  ;   add minidx
                                                  ;
                                                  ;   curidx += minidx
$C35E: $18            clc                         ADD16 CURIDX,MINIDX,CURIDX
$C35F: $A5 $22        lda $22             
$C361: $65 $45        adc $45             
$C363: $85 $22        sta $22             
$C365: $A5 $23        lda $23             
$C367: $65 $46        adc $46             
$C369: $85 $23        sta $23             
                                          
                                                  ;
                                                  ;   make CURIDX even (low byte)
                                                  ;
$C36B: $A5 $22        lda $22                     lda CURIDX              ;   curidx &= 0xFFFE
$C36D: $29 $FE        and #$FE                    and #~%00000001
$C36F: $85 $22        sta $22                     sta CURIDX
                                          
                                                  ;
                                                  ;   check to see if we tried this already
                                                  ;
$C371: $C5 $59        cmp $59                     cmp LASTIDX
$C373: $D0 $07        bne $C37C                   bne +
$C375: $A5 $23        lda $23                     lda CURIDX  + 1
$C377: $C5 $5A        cmp $5A                     cmp LASTIDX + 1
$C379: $D0 $01        bne $C37C                   bne +
                                          
                                                  ;
                                                  ;   we can't find the line
                                                  ;
$C37B: $60            rts                         rts
                                          +
                                                  ;
                                                  ;   save current index
                                                  ;
$C37C: $A5 $22        lda $22                     MOVE16 CURIDX,LASTIDX
$C37E: $85 $59        sta $59             
$C380: $A5 $23        lda $23             
$C382: $85 $5A        sta $5A             
                                          
                                                  ;
                                                  ;   load tbl[curinx]
                                                  ;
$C384: $18            clc                         ADD16 TBL,CURIDX,TBLPTR
$C385: $AD $32 $C6    lda $C632           
$C388: $65 $22        adc $22             
$C38A: $85 $49        sta $49             
$C38C: $AD $33 $C6    lda $C633           
$C38F: $65 $23        adc $23             
$C391: $85 $4A        sta $4A             
                                          
                                          .ifdef debug
                                                  jsr DUMP_NEWLINE
                                                  jsr DUMP_I
                                                  jsr DUMP_TP
                                                  jsr DUMP_TE
                                          .endif
                                                  ;
                                                  ;   compare high byte
                                                  ;
$C393: $A0 $01        ldy #$01                    ldy #1
$C395: $B1 $49        lda ($49),y                 lda (TBLPTR),y
$C397: $C5 $FE        cmp $FE                     cmp LNUM + 1
$C399: $D0 $07        bne $C3A2                   bne +
                                                  ;
                                                  ;   compare low byte
                                                  ;
$C39B: $88            dey                         dey
$C39C: $B1 $49        lda ($49),y                 lda (TBLPTR),y
$C39E: $C5 $FD        cmp $FD                     cmp LNUM
$C3A0: $F0 $18        beq $C3BA                   beq +++
                                          +
                                                  ;
                                                  ;   not equal
                                                  ;
$C3A2: $90 $0B        bcc $C3AF                   bcc +
                                          
                                          .ifdef debug
                                                  jsr DUMP_PLUS
                                          .endif
                                                  ;
                                                  ;   table entry greater than lnum
                                                  ;
$C3A4: $A5 $22        lda $22                     MOVE16 CURIDX, MAXIDX
$C3A6: $85 $43        sta $43             
$C3A8: $A5 $23        lda $23             
$C3AA: $85 $44        sta $44             
$C3AC: $4C $4D $C3    jmp $C34D                   jmp -                   ;   try next guess
                                          +
                                          .ifdef debug
                                                  jsr DUMP_MINUS
                                          .endif
                                                  ;
                                                  ;   table entry less than lnum
                                                  ;
$C3AF: $A5 $22        lda $22                     MOVE16 CURIDX,MINIDX
$C3B1: $85 $45        sta $45             
$C3B3: $A5 $23        lda $23             
$C3B5: $85 $46        sta $46             
$C3B7: $4C $4D $C3    jmp $C34D                   jmp -                   ;   try next guess
                                          +
                                          .ifdef debug
                                                  jsr DUMP_FOUNDLINE
                                          .endif
$C3BA: $60            rts                         rts
                                          
Processing insertlinenum.asm
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* INSERTLINENUM                            *
                                          ;*                                          *
                                          ;*  insert new linenumber in basic program  *
                                          ;*                                          *
                                          ;********************************************
                                          INSERTLINENUM
$C3BB: $48            pha                         PUSHAY
$C3BC: $98            tya                 
$C3BD: $48            pha                 
                                                  ;
                                                  ;   we found the line
                                                  ;   now calculate the new line number based on index
                                                  ;
$C3BE: $46 $23        lsr $23                     lsr CURIDX + 1          ; curidx >>= 1
$C3C0: $66 $22        ror $22                     ror CURIDX
                                          
                                                  ;
                                                  ; multiply by line increment and store in product
                                                  ;
$C3C2: $A5 $A3        lda $A3                     MULT16 CURIDX,INCR,PRODUCT
$C3C4: $48            pha                 
$C3C5: $A5 $A4        lda $A4             
$C3C7: $48            pha                 
$C3C8: $A9 $00        lda #$00            
$C3CA: $85 $6B        sta $6B             
$C3CC: $85 $6C        sta $6C             
$C3CE: $A2 $10        ldx #$10            
$C3D0: $46 $A4        lsr $A4             
$C3D2: $66 $A3        ror $A3             
$C3D4: $90 $0B        bcc $C3E1           
$C3D6: $A5 $6B        lda $6B             
$C3D8: $18            clc                 
$C3D9: $65 $22        adc $22             
$C3DB: $85 $6B        sta $6B             
$C3DD: $A5 $6C        lda $6C             
$C3DF: $65 $23        adc $23             
$C3E1: $6A            ror                 
$C3E2: $85 $6C        sta $6C             
$C3E4: $66 $6B        ror $6B             
$C3E6: $66 $6A        ror $6A             
$C3E8: $66 $69        ror $69             
$C3EA: $CA            dex                 
$C3EB: $D0 $E3        bne $C3D0           
$C3ED: $68            pla                 
$C3EE: $85 $A4        sta $A4             
$C3F0: $68            pla                 
$C3F1: $85 $A3        sta $A3             
                                          
                                                  ;
                                                  ;   add start line
                                                  ;   store in BNVAR
                                                  ;
$C3F3: $18            clc                         ADD16 LSTART,PRODUCT,BNVAR
$C3F4: $AD $2E $C6    lda $C62E           
$C3F7: $65 $69        adc $69             
$C3F9: $85 $4B        sta $4B             
$C3FB: $AD $2F $C6    lda $C62F           
$C3FE: $65 $6A        adc $6A             
$C400: $85 $4C        sta $4C             
                                          
$C402: $20 $B7 $C5    jsr $C5B7                   jsr BINBCD16
                                          
                                          .ifdef debug
                                                  PUSHAY
                                                  jsr PRINTBCDSTR
                                                  POPAY
                                          .endif
$C405: $20 $0D $C6    jsr $C60D                   jsr BCDLENGTH
                                          
                                          .ifdef debug
                                                  jsr DUMP_LENGTH
                                                  lda BCDLEN
                                                  jsr DUMP_BYTE
                                                  jsr DUMP_EQUALS
                                                  lda LNUMLEN
                                                  jsr DUMP_BYTE
                                                  jsr DUMP_NEWLINE
                                          .endif
$C408: $A5 $66        lda $66                     lda LNUMLEN
$C40A: $C5 $61        cmp $61                     cmp BCDLEN
$C40C: $D0 $19        bne $C427                   bne +
                                          
                                                  ;
                                                  ;   line numbers are the same length
                                                  ;
$C40E: $A4 $62        ldy $62                     ldy LININS
                                                  ;
                                                  ;   get offset to bcdstring
                                                  ;
                                          -
$C410: $38            sec                         sec
$C411: $A9 $05        lda #$05                    lda #5
$C413: $E5 $61        sbc $61                     sbc BCDLEN
$C415: $AA            tax                         tax
                                                  ;
                                                  ;   copy string into line
                                                  ;
                                          -
$C416: $B5 $3B        lda $3B,x                   lda BCDSTR,x
$C418: $91 $FB        sta ($FB),y                 sta (NXTLN),y
$C41A: $C8            iny                         iny
$C41B: $E8            inx                         inx
$C41C: $E0 $05        cpx #$05                    cpx #5
$C41E: $D0 $F6        bne $C416                   bne -
                                          
$C420: $98            tya                         tya
$C421: $AA            tax                         tax
$C422: $CA            dex                         dex
                                          
$C423: $68            pla                         POPAY
$C424: $A8            tay                 
$C425: $68            pla                 
$C426: $60            rts                         rts
                                          +
$C427: $90 $07        bcc $C430                   bcc +
                                          
                                                  ;
                                                  ;   new line number is smaller
                                                  ;
$C429: $20 $36 $C4    jsr $C436                   jsr MOVELINESDOWN
                                          -
$C42C: $A4 $62        ldy $62                     ldy LININS
$C42E: $D0 $E0        bne $C410                   bne ---
                                          
                                                  ;
                                                  ;   new line number is larger
                                                  ;
                                          +
$C430: $20 $D9 $C4    jsr $C4D9                   jsr MOVELINESUP
$C433: $4C $2C $C4    jmp $C42C                   jmp -
                                          
Processing movelines.asm
                                          
                                          FROM    = MINIDX
                                          TO      = MAXIDX
                                          SIZEL   = CURIDX
                                          SIZEH   = CURIDX + 1
                                          ;********************************************
                                          ;*                                          *
                                          ;* MOVELINESDOWN                            *
                                          ;*                                          *
                                          ;*  move basic lines to get rid of extra    *
                                          ;*  space                                   *
                                          ;*                                          *
                                          ;********************************************
                                          MOVELINESDOWN
                                                  ;
                                                  ;   save nxtln
                                                  ;
$C436: $A5 $FB        lda $FB                     MOVE16 NXTLN,+
$C438: $8D $D7 $C4    sta $C4D7           
$C43B: $A5 $FC        lda $FC             
$C43D: $8D $D8 $C4    sta $C4D8           
                                          
                                                  ;
                                                  ;   set MINIDX to endptr
                                                  ;
$C440: $A5 $FB        lda $FB                     MOVE16 NXTLN,MINIDX
$C442: $85 $45        sta $45             
$C444: $A5 $FC        lda $FC             
$C446: $85 $46        sta $46             
                                          
$C448: $18            clc                         clc
$C449: $A5 $62        lda $62                     lda LININS
$C44B: $65 $45        adc $45                     adc MINIDX
$C44D: $85 $45        sta $45                     sta MINIDX
$C44F: $A9 $00        lda #$00                    lda #0
$C451: $65 $46        adc $46                     adc MINIDX + 1
$C453: $85 $46        sta $46                     sta MINIDX + 1
                                          
                                                  ;
                                                  ;   find out how many more bytes we need
                                                  ;
$C455: $38            sec                         sec
$C456: $A5 $66        lda $66                     lda LNUMLEN
$C458: $E5 $61        sbc $61                     sbc BCDLEN
$C45A: $85 $59        sta $59                     sta LASTIDX
                                          
                                                  ;
                                                  ;   fix basic variables
                                                  ;
$C45C: $38            sec                         sec
$C45D: $A5 $31        lda $31                     lda STREND
$C45F: $E5 $59        sbc $59                     sbc LASTIDX
$C461: $85 $31        sta $31                     sta STREND
$C463: $A5 $32        lda $32                     lda STREND+1
$C465: $E9 $00        sbc #$00                    sbc #0
$C467: $85 $32        sta $32                     sta STREND+1
                                          
                                                  ;
                                                  ;   subtract from the line start pointers
                                                  ;
                                          -
$C469: $A0 $00        ldy #$00                    ldy #NXOFF
$C46B: $38            sec                         sec
$C46C: $B1 $FB        lda ($FB),y                 lda (NXTLN),y
$C46E: $85 $43        sta $43                     sta MAXIDX
$C470: $E5 $59        sbc $59                     sbc LASTIDX
$C472: $91 $FB        sta ($FB),y                 sta (NXTLN),y
$C474: $C8            iny                         iny
$C475: $B1 $FB        lda ($FB),y                 lda (NXTLN),y
$C477: $85 $44        sta $44                     sta MAXIDX + 1
$C479: $E9 $00        sbc #$00                    sbc #0
$C47B: $91 $FB        sta ($FB),y                 sta (NXTLN),y
                                          
                                                  ;
                                                  ;   copy maxidx to nxtln
                                                  ;
$C47D: $A5 $43        lda $43                     MOVE16 MAXIDX,NXTLN
$C47F: $85 $FB        sta $FB             
$C481: $A5 $44        lda $44             
$C483: $85 $FC        sta $FC             
                                          
                                                  ;
                                                  ;   check for end of basic
                                                  ;
$C485: $20 $AD $C5    jsr $C5AD                   jsr LASTLINE
$C488: $D0 $DF        bne $C469                   bne -
                                          
                                                  ;
                                                  ;   figure out numbytes to move
                                                  ;
$C48A: $38            sec                         SUB16 MAXIDX,MINIDX,CURIDX
$C48B: $A5 $43        lda $43             
$C48D: $E5 $45        sbc $45             
$C48F: $85 $22        sta $22             
$C491: $A5 $44        lda $44             
$C493: $E5 $46        sbc $46             
$C495: $85 $23        sta $23             
                                          
                                                  ;
                                                  ;   add EOL and end of basic marker
                                                  ;
$C497: $18            clc                         ADD16I CURIDX,4,CURIDX
$C498: $A5 $22        lda $22             
$C49A: $69 $04        adc #$04            
$C49C: $85 $22        sta $22             
$C49E: $A5 $23        lda $23             
$C4A0: $69 $00        adc #$00            
$C4A2: $85 $23        sta $23             
                                          
                                                  ;
                                                  ;   set max to new dest address
                                                  ;
$C4A4: $18            clc                         clc
$C4A5: $A5 $45        lda $45                     lda MINIDX
$C4A7: $65 $59        adc $59                     adc LASTIDX
$C4A9: $85 $43        sta $43                     sta MAXIDX
$C4AB: $A5 $46        lda $46                     lda MINIDX + 1
$C4AD: $69 $00        adc #$00                    adc #0
$C4AF: $85 $44        sta $44                     sta MAXIDX + 1
                                          
                                                  ;
                                                  ;   we need to swap maxidx and minidx
                                                  ;
$C4B1: $A5 $45        lda $45                     MOVE16 MINIDX,NXTLN
$C4B3: $85 $FB        sta $FB             
$C4B5: $A5 $46        lda $46             
$C4B7: $85 $FC        sta $FC             
$C4B9: $A5 $43        lda $43                     MOVE16 MAXIDX,MINIDX
$C4BB: $85 $45        sta $45             
$C4BD: $A5 $44        lda $44             
$C4BF: $85 $46        sta $46             
$C4C1: $A5 $FB        lda $FB                     MOVE16 NXTLN,MAXIDX
$C4C3: $85 $43        sta $43             
$C4C5: $A5 $FC        lda $FC             
$C4C7: $85 $44        sta $44             
                                          
$C4C9: $20 $8C $C5    jsr $C58C                   jsr MOVEDOWN
                                          
                                                  ;
                                                  ;   restore nxtln
                                                  ;
$C4CC: $AD $D7 $C4    lda $C4D7                   MOVE16 +,NXTLN
$C4CF: $85 $FB        sta $FB             
$C4D1: $AD $D8 $C4    lda $C4D8           
$C4D4: $85 $FC        sta $FC             
$C4D6: $60            rts                         rts
                                          
$C4D7: $00 $00        .db $00, $00        +       .word 0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* MOVELINESUP                              *
                                          ;*                                          *
                                          ;*  move basic lines to add room            *
                                          ;*                                          *
                                          ;********************************************
                                          MOVELINESUP
                                                  ;
                                                  ;   save nxtln
                                                  ;
$C4D9: $A5 $FB        lda $FB                     MOVE16 NXTLN,+
$C4DB: $8D $60 $C5    sta $C560           
$C4DE: $A5 $FC        lda $FC             
$C4E0: $8D $61 $C5    sta $C561           
                                                  ;
                                                  ;   set MINIDX to endptr
                                                  ;
$C4E3: $A5 $FB        lda $FB                     MOVE16 NXTLN,MINIDX
$C4E5: $85 $45        sta $45             
$C4E7: $A5 $FC        lda $FC             
$C4E9: $85 $46        sta $46             
                                          
$C4EB: $18            clc                         clc
$C4EC: $A5 $62        lda $62                     lda LININS
$C4EE: $65 $45        adc $45                     adc MINIDX
$C4F0: $85 $45        sta $45                     sta MINIDX
$C4F2: $A9 $00        lda #$00                    lda #0
$C4F4: $65 $46        adc $46                     adc MINIDX + 1
$C4F6: $85 $46        sta $46                     sta MINIDX + 1
                                          
                                                  ;
                                                  ;   find out how many more bytes we need
                                                  ;
$C4F8: $38            sec                         sec
$C4F9: $A5 $61        lda $61                     lda BCDLEN
$C4FB: $E5 $66        sbc $66                     sbc LNUMLEN
$C4FD: $85 $59        sta $59                     sta LASTIDX
                                          
                                                  ;
                                                  ;   fix basic variables
                                                  ;
$C4FF: $18            clc                         clc
$C500: $65 $31        adc $31                     adc STREND
$C502: $85 $31        sta $31                     sta STREND
$C504: $A9 $00        lda #$00                    lda #0
$C506: $65 $32        adc $32                     adc STREND+1
$C508: $85 $32        sta $32                     sta STREND+1
                                          
                                                  ;
                                                  ;   add to the line start pointers
                                                  ;
                                          -
$C50A: $A0 $00        ldy #$00                    ldy #NXOFF
$C50C: $18            clc                         clc
$C50D: $B1 $FB        lda ($FB),y                 lda (NXTLN),y
$C50F: $85 $43        sta $43                     sta MAXIDX
$C511: $65 $59        adc $59                     adc LASTIDX
$C513: $91 $FB        sta ($FB),y                 sta (NXTLN),y
$C515: $C8            iny                         iny
$C516: $B1 $FB        lda ($FB),y                 lda (NXTLN),y
$C518: $85 $44        sta $44                     sta MAXIDX + 1
$C51A: $69 $00        adc #$00                    adc #0
$C51C: $91 $FB        sta ($FB),y                 sta (NXTLN),y
                                          
                                                  ;
                                                  ;   copy maxidx to nxtln
                                                  ;
$C51E: $A5 $43        lda $43                     MOVE16 MAXIDX,NXTLN
$C520: $85 $FB        sta $FB             
$C522: $A5 $44        lda $44             
$C524: $85 $FC        sta $FC             
                                          
                                                  ;
                                                  ;   check for end of basic
                                                  ;
$C526: $20 $AD $C5    jsr $C5AD                   jsr LASTLINE
$C529: $D0 $DF        bne $C50A                   bne -
                                          
                                                  ;
                                                  ;   figure out numbytes to move
                                                  ;
$C52B: $38            sec                         SUB16 MAXIDX,MINIDX,CURIDX
$C52C: $A5 $43        lda $43             
$C52E: $E5 $45        sbc $45             
$C530: $85 $22        sta $22             
$C532: $A5 $44        lda $44             
$C534: $E5 $46        sbc $46             
$C536: $85 $23        sta $23             
                                          
                                                  ;
                                                  ;   add EOL and end of basic marker
                                                  ;
$C538: $18            clc                         ADD16I CURIDX,4,CURIDX
$C539: $A5 $22        lda $22             
$C53B: $69 $04        adc #$04            
$C53D: $85 $22        sta $22             
$C53F: $A5 $23        lda $23             
$C541: $69 $00        adc #$00            
$C543: $85 $23        sta $23             
                                          
                                                  ;
                                                  ;   set max to new dest address
                                                  ;
$C545: $18            clc                         clc
$C546: $A5 $45        lda $45                     lda MINIDX
$C548: $65 $59        adc $59                     adc LASTIDX
$C54A: $85 $43        sta $43                     sta MAXIDX
$C54C: $A5 $46        lda $46                     lda MINIDX + 1
$C54E: $69 $00        adc #$00                    adc #0
$C550: $85 $44        sta $44                     sta MAXIDX + 1
                                          
$C552: $20 $62 $C5    jsr $C562                   jsr MOVEUP
                                          
                                                  ;
                                                  ;   restore nxtln
                                                  ;
$C555: $AD $60 $C5    lda $C560                   MOVE16 +,NXTLN
$C558: $85 $FB        sta $FB             
$C55A: $AD $61 $C5    lda $C561           
$C55D: $85 $FC        sta $FC             
$C55F: $60            rts                         rts
                                          
$C560: $00 $00        .db $00, $00        +       .word 0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* Move memory up                           *
                                          ;*                                          *
                                          ;* FROM = source start address              *
                                          ;*   TO = destination start address         *
                                          ;* SIZE = number of bytes to move           *
                                          ;*                                          *
                                          ;********************************************
                                          MOVEUP
$C562: $A6 $23        ldx $23                     ldx SIZEH               ; the last byte must be moved first
$C564: $18            clc                         clc                     ; start at the final pages of from and to
$C565: $8A            txa                         txa
$C566: $65 $46        adc $46                     adc FROM + 1
$C568: $85 $46        sta $46                     sta FROM + 1
$C56A: $18            clc                         clc
$C56B: $8A            txa                         txa
$C56C: $65 $44        adc $44                     adc TO + 1
$C56E: $85 $44        sta $44                     sta TO + 1
$C570: $E8            inx                         inx                     ; allows the use of bne after the dex below
$C571: $A4 $22        ldy $22                     ldy SIZEL
$C573: $F0 $0E        beq $C583                   beq ++
$C575: $88            dey                         dey                     ; move bytes on the last page first
$C576: $F0 $07        beq $C57F                   beq +
                                          -
$C578: $B1 $45        lda ($45),y                 lda (FROM),y
$C57A: $91 $43        sta ($43),y                 sta (TO),y
$C57C: $88            dey                         dey
$C57D: $D0 $F9        bne $C578                   bne -
                                          +
$C57F: $B1 $45        lda ($45),y                 lda (FROM),y            ; handle Y = 0 separately
$C581: $91 $43        sta ($43),y                 sta (TO),y
                                          +
$C583: $88            dey                         dey
$C584: $C6 $46        dec $46                     dec FROM + 1            ; move the next page (if any)
$C586: $C6 $44        dec $44                     dec TO + 1
$C588: $CA            dex                         dex
$C589: $D0 $ED        bne $C578                   bne -
                                          
$C58B: $60            rts                         rts
                                          
                                          ;********************************************
                                          ; Move memory down                          *
                                          ;                                           *
                                          ; FROM = source start address               *
                                          ;   TO = destination start address          *
                                          ; SIZE = number of bytes to move            *
                                          ;                                           *
                                          ;********************************************
                                          MOVEDOWN
$C58C: $A0 $00        ldy #$00                    ldy #0
$C58E: $A6 $23        ldx $23                     ldx SIZEH
$C590: $F0 $0E        beq $C5A0                   beq +
                                          -
$C592: $B1 $45        lda ($45),y                 lda (FROM),y            ;   move a page at a time
$C594: $91 $43        sta ($43),y                 sta (TO),y
$C596: $C8            iny                         iny
$C597: $D0 $F9        bne $C592                   bne -
$C599: $E6 $46        inc $46                     inc FROM + 1
$C59B: $E6 $44        inc $44                     inc TO + 1
$C59D: $CA            dex                         dex
$C59E: $D0 $F2        bne $C592                   bne -
                                          +
$C5A0: $A6 $22        ldx $22                     ldx SIZEL
$C5A2: $F0 $08        beq $C5AC                   beq +
                                          -
$C5A4: $B1 $45        lda ($45),y                 lda (FROM),y            ;   move the remaining bytes
$C5A6: $91 $43        sta ($43),y                 sta (TO),y
$C5A8: $C8            iny                         iny
$C5A9: $CA            dex                         dex
$C5AA: $D0 $F8        bne $C5A4                   bne -
                                          +
$C5AC: $60            rts                         rts
                                          
Processing util.asm
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;*  LASTLINE                                *
                                          ;*                                          *
                                          ;*  set the Z flag if we are at the end OF  *
                                          ;*  basic program.                          *
                                          ;*  nxtln must point to current line        *
                                          ;*                                          *
                                          ;*  destroys a,y                            *
                                          ;*                                          *
                                          ;********************************************
                                          LASTLINE
                                                  ;
                                                  ;   load the pointer to next line
                                                  ;   00 00 is the end of program
                                                  ;
$C5AD: $A0 $00        ldy #$00                    ldy #NXOFF
$C5AF: $B1 $FB        lda ($FB),y                 lda (NXTLN),y
$C5B1: $D0 $03        bne $C5B6                   bne +
$C5B3: $C8            iny                         iny
$C5B4: $B1 $FB        lda ($FB),y                 lda (NXTLN),y
                                          +
$C5B6: $60            rts                         rts
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;*  BINBCD16                                *
                                          ;*                                          *
                                          ;*  convert 16 bit number to bcd and a      *
                                          ;*   string                                 *
                                          ;*  bnvar must contain number to convert    *
                                          ;*  bcd on exit contains bcd number 3 bytes *
                                          ;*                                          *
                                          ;*  bcdstr on exit contains bcd string      *
                                          ;*                                          *
                                          ;*  destroys    a,y                         *
                                          ;*                                          *
                                          ;********************************************
                                          BINBCD16
                                                  ;
                                                  ;   set decimal code
                                                  ;   clear result
                                                  ;
$C5B7: $F8            sed                         sed
$C5B8: $A9 $00        lda #$00                    lda #0
$C5BA: $85 $4D        sta $4D                     sta BCD
$C5BC: $85 $4E        sta $4E                     sta BCD + 1
$C5BE: $85 $4F        sta $4F                     sta BCD + 2
                                          
                                                  ;
                                                  ;   loop 16 bits
                                                  ;
$C5C0: $A0 $10        ldy #$10                    ldy #16
                                          -
$C5C2: $06 $4B        asl $4B                     asl BNVAR               ;   shift bnvar left by 1
$C5C4: $26 $4C        rol $4C                     rol BNVAR + 1
$C5C6: $A5 $4D        lda $4D                     lda BCD                 ;   shift into bcd
$C5C8: $65 $4D        adc $4D                     adc BCD
$C5CA: $85 $4D        sta $4D                     sta BCD
$C5CC: $A5 $4E        lda $4E                     lda BCD + 1             ;   shift into bcd + 1
$C5CE: $65 $4E        adc $4E                     adc BCD + 1
$C5D0: $85 $4E        sta $4E                     sta BCD + 1
$C5D2: $A5 $4F        lda $4F                     lda BCD + 2             ;   shift into bcd + 2
$C5D4: $65 $4F        adc $4F                     adc BCD + 2
$C5D6: $85 $4F        sta $4F                     sta BCD + 2
                                          
$C5D8: $88            dey                         dey                     ;   check for end of loop
$C5D9: $D0 $E7        bne $C5C2                   bne -
                                          
                                                  ;
                                                  ;   clear decimal mode
                                                  ;
$C5DB: $D8            cld                         cld
                                          
                                                  ;
                                                  ;   convert bcd 3 bytes to a string
                                                  ;
$C5DC: $A5 $4D        lda $4D                     BCD2STR BCD + 0, BCDSTR + 3
$C5DE: $29 $F0        and #$F0            
$C5E0: $4A            lsr                 
$C5E1: $4A            lsr                 
$C5E2: $4A            lsr                 
$C5E3: $4A            lsr                 
$C5E4: $09 $30        ora #$30            
$C5E6: $85 $3E        sta $3E             
$C5E8: $A5 $4D        lda $4D             
$C5EA: $29 $0F        and #$0F            
$C5EC: $09 $30        ora #$30            
$C5EE: $85 $3F        sta $3F             
$C5F0: $A5 $4E        lda $4E                     BCD2STR BCD + 1, BCDSTR + 1
$C5F2: $29 $F0        and #$F0            
$C5F4: $4A            lsr                 
$C5F5: $4A            lsr                 
$C5F6: $4A            lsr                 
$C5F7: $4A            lsr                 
$C5F8: $09 $30        ora #$30            
$C5FA: $85 $3C        sta $3C             
$C5FC: $A5 $4E        lda $4E             
$C5FE: $29 $0F        and #$0F            
$C600: $09 $30        ora #$30            
$C602: $85 $3D        sta $3D             
$C604: $A5 $4F        lda $4F                     lda BCD + 2
$C606: $29 $0F        and #$0F                    and #$0F
$C608: $09 $30        ora #$30                    ora #'0'
$C60A: $85 $3B        sta $3B                     sta BCDSTR
$C60C: $60            rts                         rts
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;*  BCDLENGTH                               *
                                          ;*                                          *
                                          ;*  get length of BCDSTR                    *
                                          ;*  store result in BCDLEN                  *
                                          ;*                                          *
                                          ;*  destroys    a,y                         *
                                          ;*                                          *
                                          ;********************************************
                                          BCDLENGTH
                                                  ;
                                                  ;   loop through 5 chars
                                                  ;
$C60D: $A0 $00        ldy #$00                    ldy #0
$C60F: $84 $61        sty $61                     sty BCDLEN
                                          -
$C611: $B9 $3B $00    lda $003B,y                 lda BCDSTR,y
$C614: $C9 $30        cmp #$30                    cmp #'0'
$C616: $D0 $08        bne $C620                   bne +
                                          
$C618: $C0 $04        cpy #$04                    cpy #4
$C61A: $F0 $04        beq $C620                   beq +
                                          
$C61C: $A6 $61        ldx $61                     ldx BCDLEN
$C61E: $F0 $0A        beq $C62A                   beq ++
                                          +
$C620: $84 $61        sty $61                     sty BCDLEN
$C622: $A9 $05        lda #$05                    lda #5
$C624: $38            sec                         sec
$C625: $E5 $61        sbc $61                     sbc BCDLEN
$C627: $85 $61        sta $61                     sta BCDLEN
$C629: $60            rts                         rts
                                          +
$C62A: $C8            iny                         iny
$C62B: $D0 $E4        bne $C611                   bne -
                                          
Processing debug.asm
                                          
                                          .ifdef debug
                                          
                                                  .macro DMP_BYT
                                          
                                                  PUSHAY
                                          
                                                  jsr DUMP_NEWLINE
                                          
                                                  lda #>\1
                                                  ldy #<\1
                                                  jsr DUMP_STR
                                                  lda \2       
                                                  jsr DUMP_BYTE
                                          
                                                  POPAY            
                                                  .endm
                                          
                                                  .macro DMP_WRD
                                          
                                                  PUSHAY
                                          
                                                  jsr DUMP_NEWLINE
                                          
                                                  lda #>\1
                                                  ldy #<\1
                                                  jsr DUMP_STR
                                                  lda \2 
                                                  ldy \2 + 1
                                                  jsr DUMP_BYTE
                                          
                                                  POPAY
                                                  
                                                  .endm
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_REGISTERS                           *
                                          ;*                                          *
                                          ;*  print values of all registers           *
                                          ;*                                          *
                                          ;*  destroys nothing                        *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_REGISTER
                                                  php
                                          
                                                  sta ACC
                                                  stx XREG
                                                  sty YREG
                                          
                                                  pla
                                                  sta PSTATUS
                                          
                                                  tsx
                                                  inx                     ;   account for pushed return address
                                                  inx
                                                  stx SP
                                          
                                                  ;
                                                  ;   get the return address
                                                  ;
                                                  pla
                                                  sta PC_ORIGINAL
                                                  pla
                                                  sta PC_ORIGINAL + 1
                                          
                                                  cld
                                          
                                                  sec                     ;   we need to fix pc on stack
                                                  lda PC_ORIGINAL
                                                  sbc #02
                                                  sta PC
                                                  lda PC_ORIGINAL + 1
                                                  sbc #0
                                                  sta PC + 1
                                          
                                                  ;
                                                  ;   dump a new line
                                                  ;
                                                  jsr DUMP_NEWLINE
                                                  bne +
                                          
                                          -       .byte " SP=",0
                                          -       .byte " Y=",0
                                          -       .byte " X=",0
                                          -       .byte " A=",0
                                          -       .byte " PC=",0
                                          
                                                  ;
                                                  ;   Program counter
                                                  ;
                                          +
                                                  DMP_WRD -,PC
                                          
                                                  ;
                                                  ;   A Register
                                                  ;
                                                  DMP_BYT --,ACC
                                          
                                                  ;
                                                  ;   X Register
                                                  ;
                                                  DMP_BYT ---,XREG
                                          
                                                  ;
                                                  ;   Y Register
                                                  ;
                                                  DMP_BYT ----,YREG
                                          
                                                  ;
                                                  ;   Stack Pointer
                                                  ;
                                                  DMP_BYT -----,SP + 2
                                          
                                                  ;
                                                  ;   pstatus flag
                                                  jsr DUMP_SPACE          ;   dump pstatus flags
                                                  lda #$80                ;   set mask forprocessor
                                                  sta STATTMP
                                                  ldy #0
                                                  ;
                                                  ; fall through
                                                  ;
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_STATUS                              *
                                          ;*                                          *
                                          ;*  print status register                   *
                                          ;*                                          *
                                          ;*  destroys a                              *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_STATUS
                                                  lda PSTATUS
                                                  and STATTMP
                                                  bne +
                                          
                                                  lda #'.'
                                                  bne ++
                                          +
                                                  lda DUMP_BITS,y
                                          +
                                                  jsr CHROUT
                                                  lsr STATTMP
                                                  iny
                                                  cpy #8                  ;   is this the last bit?
                                                  bne DUMP_STATUS
                                          
                                                  jsr DUMP_NEWLINE
                                                                          ;   prepare for exit
                                                                          ;   push orginal return address on stack
                                                  lda PC_ORIGINAL + 1
                                                  pha
                                                  lda PC_ORIGINAL
                                                  pha
                                          
                                                  lda PSTATUS             ;   push original processor status
                                                  pha
                                                  lda ACC                 ;   restore accumulator
                                                  ldx XREG                ;   restore x
                                                  ldy YREG                ;   restore y
                                                  plp                     ;   pull processor status
                                                  rts                     ;   exit to caller
                                          
                                          
                                          ;   symbolic codes for pstatus register bits
                                          
                                          DUMP_BITS       .byte "NV.BDIZC"
                                          PC_ORIGINAL     .word 0
                                          PC              .word 0
                                          ACC             .byte 0
                                          XREG            .byte 0
                                          YREG            .byte 0
                                          SP              .byte 0
                                          PSTATUS         .byte 0
                                          STATTMP         .byte 0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_LI                                  *
                                          ;*                                          *
                                          ;*  print line number                       *
                                          ;*                                          *
                                          ;*  destroys nothing                        *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_LI
                                                  DMP_BYT +,LININS
                                                  rts
                                          +       .byte " LI=",0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_LN                                  *
                                          ;*                                          *
                                          ;*  print line number                       *
                                          ;*                                          *
                                          ;*  destroys nothing                        *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_LN
                                                  DMP_WRD +,LNUM
                                                  rts
                                          +       .byte " LN=",0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_MX                                  *
                                          ;*                                          *
                                          ;*  print max                               *
                                          ;*                                          *
                                          ;*  destroys nothing                        *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_MX
                                                  DMP_WRD +,MAXIDX
                                                  rts
                                          +               .byte " MX=",0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_MN                                  *
                                          ;*                                          *
                                          ;*  print min                               *
                                          ;*                                          *
                                          ;*  destroys nothing                        *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_MN
                                                  DMP_WRD +,MINIDX
                                                  rts
                                          +       .byte " MN=",0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_TS                                  *
                                          ;*                                          *
                                          ;*  print table size                        *
                                          ;*                                          *
                                          ;*  destroys nothing                        *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_TS
                                                  DMP_WRD +,TBLSZ
                                                  rts
                                          +       .byte " TS=",0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_I                                   *
                                          ;*                                          *
                                          ;*  print index, tablentry                  *
                                          ;*                                          *
                                          ;*  destroys nothing                        *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_I
                                                  DMP_WRD +,CURIDX
                                                  rts
                                          +       .byte " I=",0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_TP                                  *
                                          ;*                                          *
                                          ;*  print TablePointer                      *
                                          ;*                                          *
                                          ;*  destroys nothing                        *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_TP
                                                  DMP_WRD +,TBLPTR
                                                  rts
                                          +       .byte " TP=", 0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_TE                                  *
                                          ;*                                          *
                                          ;*  print TableEntry                        *
                                          ;*                                          *
                                          ;*  destroys nothing                        *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_TE
                                                  PUSHAY
                                          
                                                  lda #>+
                                                  ldy #<+
                                                  jsr DUMP_STR
                                                  ldy #0
                                                  lda (TBLPTR),y
                                                  pha
                                                  iny
                                                  lda (TBLPTR),y
                                                  tay
                                                  pla
                                                  jsr DUMP_WORD
                                                  jsr DUMP_NEWLINE
                                          
                                                  POPAY
                                                  rts
                                          +       .byte " TE=", 0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_NXTLN                               *
                                          ;*                                          *
                                          ;*  print NXTLN=xxxx                        *
                                          ;*                                          *
                                          ;*  destroys nothing                        *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_NXTLN
                                                  DMP_WRD +,NXTLN
                                                  rts
                                          +       .byte " NXTLN=",0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_FOUNDLINE                           *
                                          ;*                                          *
                                          ;*  print FOUND LINE                        *
                                          ;*                                          *
                                          ;*  destroys nothing                        *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_FOUNDLINE
                                                  PUSHAY
                                          
                                                  lda #>+
                                                  ldy #<+
                                                  jsr DUMP_STR
                                          
                                                  POPAY
                                                  rts
                                          +       .byte "FOUND LINE ",0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_LENGTH                              *
                                          ;*                                          *
                                          ;*  print LENGTH=                           *
                                          ;*                                          *
                                          ;*  destroys nothing                        *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_LENGTH
                                                  PUSHAY
                                          
                                                  lda #>+
                                                  ldy #<+
                                                  jsr DUMP_STR
                                          
                                                  POPAY
                                                  rts
                                          +       .byte "LEN=",0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_STAR                                *
                                          ;*                                          *
                                          ;*  print *                                 *
                                          ;*                                          *
                                          ;*  destroys nothing                        *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_STAR
                                                  PUSHAY
                                          
                                                  lda #>+
                                                  ldy #<+
                                                  jsr DUMP_STR
                                          
                                                  POPAY
                                                  rts
                                          +       .byte "      *",0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_PLUS                                *
                                          ;*                                          *
                                          ;*  print +                                 *
                                          ;*                                          *
                                          ;*  destroys nothing                        *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_PLUS
                                                  PUSHAY
                                          
                                                  lda #>+
                                                  ldy #<+
                                                  jsr DUMP_STR
                                          
                                                  POPAY
                                                  rts
                                          +       .byte "      +",0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_MINUS                               *
                                          ;*                                          *
                                          ;*  print -                                 *
                                          ;*                                          *
                                          ;*  destroys nothing                        *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_MINUS
                                                  PUSHAY
                                          
                                                  lda #>+
                                                  ldy #<+
                                                  jsr DUMP_STR
                                          
                                                  POPAY
                                                  rts
                                          +       .byte "      -",0
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_NEWLINE                             *
                                          ;*                                          *
                                          ;*  print 0x0D                              *
                                          ;*                                          *
                                          ;*  destroys a                              *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_NEWLINE
                                                  lda #13
                                                  jmp CHROUT
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_SPACE                               *
                                          ;*                                          *
                                          ;*  print ' '                               *
                                          ;*                                          *
                                          ;*  destroys a                              *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_SPACE
                                                  lda #' '
                                                  jmp CHROUT
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_EQUALS                              *
                                          ;*                                          *
                                          ;*  print =                                 *
                                          ;*                                          *
                                          ;*  destroys a                              *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_EQUALS
                                                  lda #'='
                                                  jmp CHROUT
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_WORD                                *
                                          ;*                                          *
                                          ;*  print number in a(lo) y (hi) in hex     *
                                          ;*                                          *
                                          ;*  destroys a                              *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_WORD
                                                  pha
                                                  tya
                                                  jsr DUMP_BYTE
                                                  pla
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_BYTE                                *
                                          ;*                                          *
                                          ;*  print number in a  in hex               *
                                          ;*                                          *
                                          ;*  destroys a                              *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_BYTE
                                                  pha
                                                  lsr
                                                  lsr
                                                  lsr
                                                  lsr
                                                  jsr DUMP_NYBBLE
                                                  pla
                                                  and #$0F
                                                  ; fall through
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_NYBBLE                              *
                                          ;*                                          *
                                          ;*  converts the 4 bit nybble in a to       *
                                          ;*  an ascii character and prints it        *
                                          ;*                                          *
                                          ;*  destroys a                              *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_NYBBLE
                                                  ora #'0'
                                                  cmp #'9' + 1
                                                  bcc +
                                                  adc #'A' - ('9' + 2)
                                          +
                                                  jmp CHROUT
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;* DUMP_STR                                 *
                                          ;*                                          *
                                          ;*  print string pointed to by y and a      *
                                          ;*  a low byte y high byte null byte marks  *
                                          ;*  end of string                           *
                                          ;*  destroys a,y                            *
                                          ;*                                          *
                                          ;********************************************
                                          DUMP_STR
                                                  sty DUMPSTR
                                                  sta DUMPSTR + 1
                                                  ldy #0
                                          -
                                                  lda (DUMPSTR),y
                                                  beq +
                                                  jsr CHROUT
                                                  iny
                                                  bne -
                                          +
                                                  rts
                                          
                                          ;********************************************
                                          ;*                                          *
                                          ;*  PRNTLN                                  *
                                          ;*                                          *
                                          ;*  print the current line                  *
                                          ;*  nxtln must be current line              *
                                          ;*                                          *
                                          ;*  destroys    a,y                         *
                                          ;*                                          *
                                          ;********************************************
                                          PRNTLN
                                                  ;
                                                  ;   get current line number
                                                  ;   store in bnvar
                                                  ;
                                                  ldy #LNOFF
                                                  lda (NXTLN),y
                                                  sta BNVAR
                                                  iny
                                                  lda (NXTLN),y
                                                  sta BNVAR+1
                                                  ;
                                                  ;   fall through to printnum
                                                  ;
                                          ;********************************************
                                          ;*                                          *
                                          ;*  PRINTNUM                                *
                                          ;*                                          *
                                          ;*  print number in bnvar in decimal        *
                                          ;*  with a trailing space                   *
                                          ;*                                          *
                                          ;*  destroys    a,y,x                       *
                                          ;*                                          *
                                          ;********************************************
                                          PRINTNUM
                                                  ;
                                                  ;   convert to bcd and string
                                                  ;
                                                  jsr BINBCD16
                                          
                                                  ;
                                                  ;   fall through to printnum
                                                  ;
                                          ;********************************************
                                          ;*                                          *
                                          ;*  PRINTBCDSTR                             *
                                          ;*                                          *
                                          ;*  print number in bcdstr in decimal       *
                                          ;*  with a trailing space                   *
                                          ;*                                          *
                                          ;*  destroys    a,y,x                       *
                                          ;*                                          *
                                          ;********************************************
                                          PRINTBCDSTR
                                                  ;
                                                  ;   loop through 5 chars
                                                  ;
                                                  ldy #0
                                                  sty LDZFLG
                                          -
                                                  lda BCDSTR,y
                                                  cmp #'0'
                                                  bne +
                                          
                                                  cpy #4
                                                  beq +
                                          
                                                  ldx LDZFLG
                                                  beq ++
                                          +
                                                  jsr CHROUT
                                                  inc LDZFLG
                                          +
                                                  iny
                                                  cpy #5
                                                  bne -
                                          
                                                  lda #' '
                                          
                                                  jmp CHROUT
                                          
                                          .endif
Processing storage.asm
                                          ;********************************************
                                          ;*                                          *
                                          ;*  STORAGE                                 *
                                          ;*                                          *
                                          ;********************************************
$C62D: $00            .db $00             R6510SV         .byte 0
$C62E: $00 $00        .db $00, $00        LSTART          .word 0
$C630: $00 $00        .db $00, $00        IGONE_SV        .word 0
$C632: $32 $C6        .db $32, $C6        TBL             .word *
                                          
