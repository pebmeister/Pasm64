    ; Paul Baxter
    // .C64            ; C64 output
    
    .ORG $1000

        lda #'\t'
        
    .ifdef INCLUDES
        .inc "test.a"
        .inc "branchtest.a"
        .load "textfile.txt"
        .inc "scripttest.a"
    .endif
    
    .illegal OFF    ; no illegal opcodes

    ; Turn on 65C02 
    .65C02 on
        
    start
        phx
        phy
        //  bbr0 20,LoadSLASH
    .ifdef PIZZA // YAY      
        loadTAB
            lda #'\t'
        LoadSLASH
            lda #'\\'
    .endif

    .warn off
    bne end
    .warn on
    
__ora    
    ora #22
    ora #$16
    ora 178
    ora $B2
    ora 26,x
    ora $1A,x
    ora (229,x)
    ora ($E5,x)
    ora (57),y
    ora ($39),y
    ora 30243
    ora $7623
    ora 26034,x
    ora $65B2,x
    ora 48684,y 
    ora $BE2C,y

    ; and

__and
    and #136
    and #$88
    and 183
    and $B7
    and 151,x
    and $97,x
    and (20,x)
    and ($14,x)
    and (219),y
    and ($DB),y
    and 6348
    and $18CC
    and 54015,x
    and $D2FF,x
    and 62491,y
    and $F41B,y

    ; eor

__eor
    eor #51
    eor #$33
    eor 23
    eor $17
    eor 245,x
    eor $F5,x
    eor (210,x)
    eor ($D2,x)
    eor (114),y
    eor ($72),y
    eor 34053
    eor $8505
    eor 28249,x
    eor $6E59,x
    eor 64375,y
    eor $FB77,y

    ; adc

__adc
    adc #99
    adc #$63
    adc 111
    adc $6F
    adc 157,x
    adc $9D,x
    adc (74,x)
    adc ($4A,x)
    adc (228),y
    adc ($E4),y
    adc 12642
    adc $3162
    adc 55512,x
    adc $D8D8,x
    adc 28831,y
    adc $709F,y

    ; sbc

__sbc
    sbc #17
    sbc #$11
    sbc 14
    sbc $E
    sbc 197,x
    sbc $C5,x
    sbc (0,x)
    sbc ($0,x)
    sbc (139),y
    sbc ($8B),y
    sbc 31174
    sbc $79C6
    sbc 19715,x
    sbc $4D03,x
    sbc 33212,y
    sbc $81BC,y

    ; cmp

__cmp
    cmp #160
    cmp #$A0
    cmp 77
    cmp $4D
    cmp 247,x
    cmp $F7,x
    cmp (134,x)
    cmp ($86,x)
    cmp (124),y
    cmp ($7C),y
    cmp 59479
    cmp $E857
    cmp 8209,x
    cmp $2011,x
    cmp 61210,y
    cmp $EF1A,y

    ; cpx

__cpx
    cpx #140
    cpx #$8C
    cpx 161
    cpx $A1
    cpx 60066
    cpx $EAA2

    ; cpy

__cpy
    cpy #201
    cpy #$C9
    cpy 90
    cpy $5A
    cpy 59862
    cpy $E9D6

    ; dec

__dec
    dec 100
    dec $64
    dec 4,x
    dec $4,x
    dec 33871
    dec $844F
    dec 40353,x
    dec $9DA1,x

    ; dex

__dex
    dex

    ; dey

__dey
    dey

    ; inc

__inc
    inc 57
    inc $39
    inc 180,x
    inc $B4,x
    inc 19948
    inc $4DEC
    inc 45840,x
    inc $B310,x

    ; inx

__inx
    inx

    ; iny

__iny
    iny

    ; asl

__asl
    asl
    asl 49
    asl $31
    asl 223,x
    asl $DF,x
    asl 34916
    asl $8864
    asl 1727,x
    asl $6BF,x
    asl A

    ; rol

__rol
    rol
    rol 89
    rol $59
    rol 145,x
    rol $91,x
    rol 19162
    rol $4ADA
    rol 18418,x
    rol $47F2,x

    ; lsr

__lsr
    lsr
    lsr 53
    lsr $35
    lsr 43,x
    lsr $2B,x
    lsr 59450
    lsr $E83A
    lsr 61566,x
    lsr $F07E,x

    ; ror

__ror
    ror
    ror 185
    ror $B9
    ror 209,x
    ror $D1,x
    ror 9516
    ror $252C
    ror 37280,x
    ror $91A0,x

    ; lda

__lda
    lda #80
    lda #$50
    lda 49
    lda $31
    lda 84,x
    lda $54,x
    lda (26,x)
    lda ($1A,x)
    lda (236),y
    lda ($EC),y
    lda 12609
    lda $3141
    lda 8195,x
    lda $2003,x
    lda 33943,y
    lda $8497,y

    ; sta

__sta
    sta 247
    sta $F7
    sta 151,x
    sta $97,x
    sta (160,x)
    sta ($A0,x)
    sta (26),y
    sta ($1A),y
    sta 45707
    sta $B28B
    sta 3983,x
    sta $F8F,x
    sta 25910,y
    sta $6536,y

    ; ldx

__ldx
    ldx #140
    ldx #$8C
    ldx 146
    ldx $92
    ldx 7,y
    ldx $7,y
    ldx 21763
    ldx $5503
    ldx 3849,y
    ldx $F09,y

    ; stx

__stx
    stx 208
    stx $D0
    stx 8,y
    stx $8,y
    stx 10363
    stx $287B

    ; ldy

__ldy
    ldy #70
    ldy #$46
    ldy 182
    ldy $B6
    ldy 145,x
    ldy $91,x
    ldy 29500
    ldy $733C
    ldy 46942,x
    ldy $B75E,x

    ; sty

__sty
    sty 70
    sty $46
    sty 62,x
    sty $3E,x
    sty 35812
    sty $8BE4

    ; tax

__tax
    tax

    ; txa

__txa
    txa

    ; tay

__tay
    tay

    ; tya
    
__tya
    tya

    ; tsx
    
__tsx
    tsx

    ; txs
    
__txs
    txs

    ; pla
    
__pla
    pla

    ; pha
    
__pha
    pha

    ; plp
    
__plp
    plp

    ; php
    
__php
    php

    ; bpl
    
__bpl
    bpl __bmi
    bpl __php

    ; bmi
    
__bmi
    bmi __bpl
    bmi __php

    ; bvc
__bvc
    bvc __bmi
    bvc __php

    ; bvs

__bvs
    bvs __bcc
    bvs __php

    ; bcc

__bcc
    bcc __php
    bcc __bne

    ; bcs

__bcs
    bcs __nop
    bcs __nop

    ; bne

__bne
    bne __brk
    bne __rti

    ; beq

__beq
    beq __bne
    beq __jsr

    ; brk

__brk
    brk

    ; rti

__rti
    rti

    ; jsr

__jsr
    jsr 23612
    jsr $5C3C

    ; rts

__rts
    rts

    ; jmp

__jmp
    jmp 37668
    jmp $9324
    jmp (23260)
    jmp ($5ADC)

    ; bit

__bit
    bit 39
    bit $27
    bit 41461
    bit $A1F5

    ; clc

__clc
    clc

    ; sec

__sec
    sec

    ; cld

__cld
    cld

    ; sed

__sed
    sed

    ; cli

__cli
    cli

    ; sei

__sei
    sei

    ; clv

__clv
    clv

    ; nop

__nop
    nop

; illegal opcodes
    .illegal ON
    ; slo

__slo
    slo 172
    slo $AC
    slo 236,x
    slo $EC,x
    slo (216,x)
    slo ($D8,x)
    slo (43),y
    slo ($2B),y
    slo 4137
    slo $1029
    slo 6489,x
    slo $1959,x
    slo 3231,y
    slo $C9F,y

    ; rla

__rla
    rla 194
    rla $C2
    rla 168,x
    rla $A8,x
    rla (237,x)
    rla ($ED,x)
    rla (14),y
    rla ($E),y
    rla 54455
    rla $D4B7
    rla 18311,x
    rla $4787,x
    rla 34668,y
    rla $876C,y

    ; sre

__sre
    sre 210
    sre $D2
    sre 115,x
    sre $73,x
    sre (144,x)
    sre ($90,x)
    sre (239),y
    sre ($EF),y
    sre 13332
    sre $3414
    sre 27956,x
    sre $6D34,x
    sre 29981,y
    sre $751D,y

    ; rra

__rra
    rra 209
    rra $D1
    rra 65,x
    rra $41,x
    rra (6,x)
    rra ($6,x)
    rra (151),y
    rra ($97),y
    rra 62284
    rra $F34C
    rra 64769,x
    rra $FD01,x
    rra 1573,y
    rra $625,y

    ; sax

__sax
    sax 252
    sax $FC
    sax 197,y
    sax $C5,y
    sax (200,x)
    sax ($C8,x)
    sax 3236
    sax $CA4

    ; lax

__lax
    lax 65
    lax $41
    lax 148,y
    lax $94,y
    lax (165,x)
    lax ($A5,x)
    lax (150),y
    lax ($96),y
    lax 55909
    lax $DA65
    lax 61005,y
    lax $EE4D,y

    ; dcp

__dcp
    dcp 175
    dcp $AF
    dcp 158,x
    dcp $9E,x
    dcp (175,x)
    dcp ($AF,x)
    dcp (69),y
    dcp ($45),y
    dcp 52179
    dcp $CBD3
    dcp 55709,x
    dcp $D99D,x
    dcp 64323,y
    dcp $FB43,y

    ; isc

__isc
    isc 252
    isc $FC
    isc 116,x
    isc $74,x
    isc (83,x)
    isc ($53,x)
    isc (46),y
    isc ($2E),y
    isc 62057
    isc $F269
    isc 8656,x
    isc $21D0,x
    isc 39641,y
    isc $9AD9,y

    ; anc

__anc
    anc #99
    anc #$63

    ; anc2

__anc2
    anc2 #46
    anc2 #$2E

    ; alr

__alr
    alr #107
    alr #$6B

    ; arr

__arr
    arr #69
    arr #$45

    ; xaa

__xaa
    xaa #123
    xaa #$7B

    ; lax2

__lax2
    lax2 #196
    lax2 #$C4

    ; axs

__axs
    axs #34
    axs #$22

    ; sbc2

__sbc2
    sbc2 #242
    sbc2 #$F2

    ; ahx

__ahx
    ahx (132),y
    ahx ($84),y
    ahx 2175,y
    ahx $87F,y

    ; shy

__shy
    shy 17945,x
    shy $4619,x

    ; shx

__shx
    shx 21368,y
    shx $5378,y

    ; tas

__tas
    tas 53497,y
    tas $D0F9,y

    ; las

__las
    las 35256,y
    las $89B8,y

    .illegal OFF

    ; maxOpcode
__maxOpcode
    .db "end",0


    ; loop test
    .var count, aaa, bbb
    .for count = 1 .To 3 .step 2
        aaa = count
        .while (aaa<6)
            aaa = aaa + 1
            ldx #aaa
            .if (aaa>4)
                brk
                brk
            .else
                bbb = 0
                .repeat
                    nop
                    bbb = bbb + 2
                .until (bbb > 6)
                .do
                    lda #bbb
                    bbb = bbb + 5
                .while bbb < 15
            .endif
        .wend
    .next count

    .macro macroNoParam
        nop
    .endm
     
    .macro macroTest
        lda @0
        sta @1
        .if @0 <= @2
            macroTest @0 + 1, @1 + 1
        .endif
    .endm
    
    .dw  "Hello World"
    
    macroTest $FE, $C000, $101
    rts

    .dw $FFF3
    
    .warn OFF
    bne __ora
    .warn on
    
    macroNoParam
    
    .section  end
        end
            jmp start
            rts
    .endsection       


end
